<?xml version='1.0' encoding='UTF-8'?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:CodeObj="http://cybox.mitre.org/objects#CodeObject-2" xmlns:cyboxCommon="http://cybox.mitre.org/common-2" targetNamespace="http://cybox.mitre.org/objects#CodeObject-2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.1">
	<xs:annotation>
		<xs:documentation>This schema was originally developed by The MITRE Corporation. The CybOX XML Schema implementation is maintained by The MITRE Corporation and developed by the open CybOX Community. For more information, including how to get involved in the effort and how to submit change requests, please visit the CybOX website at http://cybox.mitre.org.</xs:documentation>
		<xs:appinfo>
			<schema>Code_Object</schema>
			<version>2.1</version>
			<date>01/22/2014</date>			
			<short_description>The following specifies the fields and types that compose this defined CybOX Object type. Each defined object is an extension of the abstract ObjectPropertiesType, defined in CybOX Common. For more information on this extension mechanism, please see the CybOX Specification. This document is intended for developers and assumes some familiarity with XML. </short_description>
			<terms_of_use>Copyright (c) 2012-2014, The MITRE Corporation. All rights reserved. The contents of this file are subject to the terms of the CybOX License located at http://cybox.mitre.org/about/termsofuse.html. See the CybOX License for the specific language governing permissions and limitations for use of this schema. When distributing copies of the CybOX Schema, this license header must be included.</terms_of_use>
		</xs:appinfo>
	</xs:annotation>
	<xs:import namespace="http://cybox.mitre.org/common-2" schemaLocation="../cybox_common.xsd"/>
	<xs:element name="Code_Object" type="CodeObj:CodeObjectType">
		<xs:annotation>
			<xs:documentation>The Code object is intended to characterize a body of computer code.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="CodeObjectType">
		<xs:annotation>
			<xs:documentation>The CodeObjectType type is intended to characterize a body of computer code.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="cyboxCommon:ObjectPropertiesType">
				<xs:sequence>
					<xs:element name="Description" type="cyboxCommon:StructuredTextType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Description field is intended for use in providing a brief description of the code that is encapsulated in this field.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Type" type="CodeObj:CodeTypeType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type field is intended to provide a way of specifying the type of code being characterized.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Purpose" type="CodeObj:CodePurposeType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type field is intended to provide a way of specifying the purpose or flavor of code being characterized.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Code_Language" type="CodeObj:CodeLanguageType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The code_language field refers to the code language used in the code characterized in this field.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Targeted_Platforms" type="CodeObj:TargetedPlatformsType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Targeted_Platforms field specifies a list platforms that this code is targeted for.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Processor_Family" type="CodeObj:ProcessorTypeType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>The processor_family field specifies the class of processor that the code snippet is targeting. This field may be specified multiple times for code snippets that are applicable across multiple processor families. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Discovery_Method" type="cyboxCommon:MeasureSourceType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Discovery_Method field is intended to characterize the method and/or tool used to discover the code.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Start_Address" type="cyboxCommon:HexBinaryObjectPropertyType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The start_address field can be used to reference the start address of the code, if it was discovered inside a binary.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Code_Segment" type="cyboxCommon:StringObjectPropertyType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Code_Segment field encompasses any arbitrary code segment in unencoded (plaintext or binary) format. Code would typically be included here within a CDATA section.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Code_Segment_XOR" type="CodeObj:CodeSegmentXORType" form="qualified" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Code_Segment_XOR field encompasses any arbitrary code segment. Its contents should contain the actual code segment XORed with the pattern defined in the xorpattern property. This is so that the code contained in the pattern does not trigger IDS, AV, or other signature-based scanners. XOR'd Code would typically be included here within a CDATA section.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Digital_Signatures" type="cyboxCommon:DigitalSignaturesType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Digital_Signatures field is optional and captures one or more digital signatures for the code.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Extracted_Features" type="cyboxCommon:ExtractedFeaturesType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A description of features extracted from this code segment.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CodeTypeType">
		<xs:annotation>
			<xs:documentation>CodeTypeType specifies types of code, via a union of the CodeTypeEnum type and the atomic xs:string type. Its base type is the CybOX Core BaseObjectPropertyType, for permitting complex (i.e. regular-expression based) specifications.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="cyboxCommon:BaseObjectPropertyType">
				<xs:simpleType>
					<xs:union memberTypes="CodeObj:CodeTypeEnum xs:string"/>
				</xs:simpleType>
				<xs:attribute name="datatype" type="cyboxCommon:DatatypeEnum" fixed="string">
					<xs:annotation>
						<xs:documentation>This field is optional and specifies the expected type for the value of the specified field.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="CodeSegmentXORType">
		<xs:annotation>
			<xs:documentation>Used to encapsulate a segment of code that has been XORed with a pattern in order to avoid tripping anti-virus detection.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="cyboxCommon:StringObjectPropertyType">
				<xs:attribute name="xor_pattern" type="xs:hexBinary" default="55AA55AA55AA55BB" use="optional">
					<xs:annotation>
						<xs:documentation>The xor_pattern field contains a 16-hexadecimal-character hex string, which represents the pattern that the Code_Segment_XOR field should be XORed with in order to recover the actual code. The default value is 55AA55AA55AA55BB, as specified by IETF RFC 5901.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="CodeTypeEnum">
		<xs:annotation>
			<xs:documentation>CodeTypeEnum is a (non-exhaustive) enumeration of code types.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Source_Code">
				<xs:annotation>
					<xs:documentation>The code represented is in the form of Source Code.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Byte_Code">
				<xs:annotation>
					<xs:documentation>The code represented is in the form of Byte Code.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Binary_Code">
				<xs:annotation>
					<xs:documentation>The code represented is in the form of binary code.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="CodePurposeType">
		<xs:annotation>
			<xs:documentation>CodePurposeType specifies intended purposes of code, via a union of the CodePurposeEnum type and the atomic xs:string type. Its base type is the CybOX Core BaseObjectPropertyType, for permitting complex (i.e. regular-expression based) specifications.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="cyboxCommon:BaseObjectPropertyType">
				<xs:simpleType>
					<xs:union memberTypes="CodeObj:CodePurposeEnum xs:string"/>
				</xs:simpleType>
				<xs:attribute name="datatype" type="cyboxCommon:DatatypeEnum" fixed="string">
					<xs:annotation>
						<xs:documentation>This field is optional and specifies the expected type for the value of the specified field.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="CodePurposeEnum">
		<xs:annotation>
			<xs:documentation>CodePurposeEnum is a (non-exhaustive) enumeration of classes of code intended purposes.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Application_Code">
				<xs:annotation>
					<xs:documentation>The code represented is intended as application code.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Library_Code">
				<xs:annotation>
					<xs:documentation>The code represented is intended as library code.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Shellcode">
				<xs:annotation>
					<xs:documentation>The code represented is intended as shellcode.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Exploit_Code">
				<xs:annotation>
					<xs:documentation>The code represented is intended as exploit code.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Unknown">
				<xs:annotation>
					<xs:documentation>The code represented is intended for unknown purposes.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Other">
				<xs:annotation>
					<xs:documentation>The code represented is intended for a purpose other than those listed in this enumeration.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="CodeLanguageType">
		<xs:annotation>
			<xs:documentation>CodeLanguageType specifies languages of code, via a union of the CodeLanguageEnum type and the atomic xs:string type. Its base type is the CybOX Core BaseObjectPropertyType, for permitting complex (i.e. regular-expression based) specifications.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="cyboxCommon:BaseObjectPropertyType">
				<xs:simpleType>
					<xs:union memberTypes="CodeObj:CodeLanguageEnum xs:string"/>
				</xs:simpleType>
				<xs:attribute name="datatype" type="cyboxCommon:DatatypeEnum" fixed="string">
					<xs:annotation>
						<xs:documentation>This field is optional and specifies the expected type for the value of the specified field.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="CodeLanguageEnum">
		<xs:annotation>
			<xs:documentation>The CodeLanguageEnum simple type is an (non-exhaustive) enumeration of computer code languages.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="C">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the C programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="C++">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the C++ programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="C#">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the C# programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Java">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the Java programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="JSP">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the JSP (Java Server Pages) language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Javascript">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the Javascript programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="ASP.NET">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the ASP.NET programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SQL">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in SQL (Standard Query Language).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Python">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the Python programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Perl">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the Perl programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PHP">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the PHP programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SOAP">
				<xs:annotation>
					<xs:documentation>Indicates the code is written as a SOAP message.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Ruby">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in the Ruby programming language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Shell">
				<xs:annotation>
					<xs:documentation>Indicates the code is written as a Shell script.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PseudoCode">
				<xs:annotation>
					<xs:documentation>Indicates the code is written as pseudo code.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value=".NET">
				<xs:annotation>
					<xs:documentation>Indicates the code utilizes the .NET framework.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Assembly">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in an assembly language.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="XML">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in XML (eXtensible Markup Language).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="HTML">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in HTML (HyperText Markup Language).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Other">
				<xs:annotation>
					<xs:documentation>Indicates the code is written in a language not found in this enumeration.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ProcessorTypeType">
		<xs:annotation>
			<xs:documentation>ProcessorTypeType specifies relevant processor families, via a union of the ProcessorTypeEnum type and the atomic xs:string type. Its base type is the CybOX Core BaseObjectPropertyType, for permitting complex (i.e. regular-expression based) specifications.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="cyboxCommon:BaseObjectPropertyType">
				<xs:simpleType>
					<xs:union memberTypes="CodeObj:ProcessorTypeEnum xs:string"/>
				</xs:simpleType>
				<xs:attribute name="datatype" type="cyboxCommon:DatatypeEnum" fixed="string">
					<xs:annotation>
						<xs:documentation>This attribute is optional and specifies the expected type for the value of the specified property.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="ProcessorTypeEnum">
		<xs:annotation>
			<xs:documentation>The ProcessorTypeEnum simple type is an (non-exhaustive) enumeration of computer processor architectures.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="x86-32">
				<xs:annotation>
					<xs:documentation>Indicates a x86 32bit processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="x86-64">
				<xs:annotation>
					<xs:documentation>Indicates a x86 64bit processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IA-64">
				<xs:annotation>
					<xs:documentation>Indicates an IA (Intel Itanium) 64bit processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PowerPC">
				<xs:annotation>
					<xs:documentation>Indicates a PowerPC processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="ARM">
				<xs:annotation>
					<xs:documentation>Indicates an ARM processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Alpha">
				<xs:annotation>
					<xs:documentation>Indicates an Alpha processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SPARC">
				<xs:annotation>
					<xs:documentation>Indicates a SPARC processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="z/Architecture">
				<xs:annotation>
					<xs:documentation>Indicates a z/Architecture (IBM) processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="eSi-RISC">
				<xs:annotation>
					<xs:documentation>Indicates an eSi-RISC processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="MIPS">
				<xs:annotation>
					<xs:documentation>Indicates a MIPS processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Motorola 68k">
				<xs:annotation>
					<xs:documentation>Indicates a Motorola 68k processor.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Other">
				<xs:annotation>
					<xs:documentation>Indicates a processor outside of this enumeration.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="TargetedPlatformsType">
		<xs:annotation>
			<xs:documentation>A list of targeted platforms.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Targeted_Platform" type="cyboxCommon:PlatformSpecificationType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>The Targeted_Platform field specifies a particular platform that this code is targeted for.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
