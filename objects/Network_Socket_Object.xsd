<?xml version='1.0' encoding='UTF-8'?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:NetworkSocketObj="http://cybox.mitre.org/objects#NetworkSocketObject-2" xmlns:SocketAddressObj="http://cybox.mitre.org/objects#SocketAddressObject-1" xmlns:cyboxCommon="http://cybox.mitre.org/common-2" targetNamespace="http://cybox.mitre.org/objects#NetworkSocketObject-2" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.1">
	<xs:annotation>
		<xs:documentation>This schema was originally developed by The MITRE Corporation. The CybOX XML Schema implementation is maintained by The MITRE Corporation and developed by the open CybOX Community. For more information, including how to get involved in the effort and how to submit change requests, please visit the CybOX website at http://cybox.mitre.org.</xs:documentation>
		<xs:appinfo>
			<schema>Network_Socket_Object</schema>
			<version>2.1</version>
			<date>01/22/2014</date>			
			<short_description>The following specifies the fields and types that compose this defined CybOX Object type. Each defined object is an extension of the abstract ObjectPropertiesType, defined in CybOX Common. For more information on this extension mechanism, please see the CybOX Specification. This document is intended for developers and assumes some familiarity with XML. </short_description>
			<terms_of_use>Copyright (c) 2012-2014, The MITRE Corporation. All rights reserved. The contents of this file are subject to the terms of the CybOX License located at http://cybox.mitre.org/about/termsofuse.html. See the CybOX License for the specific language governing permissions and limitations for use of this schema. When distributing copies of the CybOX Schema, this license header must be included.</terms_of_use>
		</xs:appinfo>
	</xs:annotation>
	<xs:import namespace="http://cybox.mitre.org/common-2" schemaLocation="../cybox_common.xsd"/>
	<xs:import namespace="http://cybox.mitre.org/objects#SocketAddressObject-1" schemaLocation="Socket_Address_Object.xsd"/>
	<xs:element name="Network_Socket" type="NetworkSocketObj:NetworkSocketObjectType">
		<xs:annotation>
			<xs:documentation>The Network_Socket element is intended to characterize network sockets.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="NetworkSocketObjectType" mixed="false">
		<xs:annotation>
			<xs:documentation>The NetworkSocketObjectType is intended to characterize network sockets.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="cyboxCommon:ObjectPropertiesType">
				<xs:sequence>
					<xs:element name="Address_Family" type="NetworkSocketObj:AddressFamilyType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Address_Family field specifies the address family (AF_*) that the socket is configured for.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Domain" type="NetworkSocketObj:DomainFamilyType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Domain field specifies the communication domain (PF_*) of the socket.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Local_Address" type="SocketAddressObj:SocketAddressObjectType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Local_Address field specifies the IP address and port for the socket on the local machine.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Options" type="NetworkSocketObj:SocketOptionsType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Options field specifies any particular options used by the socket.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Protocol" type="NetworkSocketObj:ProtocolType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Protocol field specifies the type of IP layer protocol used by the socket.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Remote_Address" type="SocketAddressObj:SocketAddressObjectType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Remote_Address field specifies the IP address and port for the socket on the remote machine.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Type" type="NetworkSocketObj:SocketType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The Type field specifies the type of socket being characterized.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="Socket_Descriptor" type="cyboxCommon:NonNegativeIntegerObjectPropertyType">
						<xs:annotation>
							<xs:documentation>The Socket_Descriptor field specifies the socket file descriptor value associated with the socket. Negative values are not allowed.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="is_blocking" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>The is_blocking field specifies whether or not the socket is in blocking mode.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="is_listening" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>The is_listening field specifies whether or not the socket is in listening mode.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SocketOptionsType">
		<xs:annotation>
			<xs:documentation>The SocketOptionsType specifies any particular options used by the socket. If an options is supported only by specific address families or socket types, that's indicated in parentheses.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="IP_MULTICAST_IF" type="cyboxCommon:StringObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set the interface over which outgoing multicast datagrams should be sent (AF_INET / SOCK_DGRAM or SOCK_RAW).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="IP_MULTICAST_IF2" type="cyboxCommon:StringObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set the interface over which outgoing multicast datagrams should be sent (AF_INET6 / SOCK_DGRAM or SOCK_RAW) .</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="IP_MULTICAST_LOOP" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specify that the sending host receives a copy of an outgoing multicast datagram (AF_INET / SOCK_DGRAM or SOCK_RAW).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="IP_TOS" type="cyboxCommon:StringObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set Type of Service (TOS) and Precedence in the IP header (AF_INET).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_BROADCAST" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Enable the socket for issuing messages to a broadcast address (AF_INET / SOCK_DGRAM or SOCK_RAW). (.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_CONDITIONAL_ACCEPT" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Allows an application to decide whether or not to accept an incoming connection on a listening socket (Windows only).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_KEEPALIVE" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Keep the connection up by sending periodic transmissions (AF_INET or AF_INET6 / SOCK_STREAM).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_DONTROUTE" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Bypass normal routing mechanisms (AF_INET or AF_INET6 ).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_LINGER" type="cyboxCommon:UnsignedIntegerObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies if the system attempts delivery of or discards any buffered data when a close() is issued.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_DONTLINGER" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Complement of SO_LINGER.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_OOBINLINE" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Indicates whether out-of-band data is received inline with normal data (AF_INET or AF_INET6).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_RCVBUF" type="cyboxCommon:UnsignedIntegerObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set size of the receive buffer.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_GROUP_PRIORITY" type="cyboxCommon:UnsignedIntegerObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Sets the relative priority for the socket in its group (Windows only).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_REUSEADDR" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Indicates if the local socket address can be reused (AF_INET or AF_INET6 / SOCK_DGRAM or SOCK_RAW).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_DEBUG" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Indicates if low-level debugging is active.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_RCVTIMEO" type="cyboxCommon:UnsignedIntegerObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set the receive timeout value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_SNDBUF" type="cyboxCommon:UnsignedIntegerObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set size of the send buffer.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_SNDTIMEO" type="cyboxCommon:UnsignedIntegerObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set the send timeout value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_UPDATE_ACCEPT_CONTEXT" type="cyboxCommon:UnsignedIntegerObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Updates the properties of the socket which are inherited from the listening socket (Windows only).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SO_TIMEOUT" type="cyboxCommon:UnsignedIntegerObjectPropertyType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Set the socket timeout.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="TCP_NODELAY" type="xs:boolean" minOccurs="0">
				<xs:annotation>
					<xs:documentation>When set, TCP will send data immediately instead of using the Nagle delay algorithm (AF_INET or AF_INET6 / SOCK_STREAM). (.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AddressFamilyType">
		<xs:annotation>
			<xs:documentation>AddressFamilyType specifies address family types, via a union of the AddressFamilyTypeEnum type and the atomic xs:string type. Its base type is the CybOX Core BaseObjectPropertyType, for permitting complex (i.e. regular-expression based) specifications.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="cyboxCommon:BaseObjectPropertyType">
				<xs:simpleType>
					<xs:union memberTypes="NetworkSocketObj:AddressFamilyTypeEnum xs:string"/>
				</xs:simpleType>
				<xs:attribute name="datatype" type="cyboxCommon:DatatypeEnum" fixed="string">
					<xs:annotation>
						<xs:documentation>This attribute is optional and specifies the expected type for the value of the specified property.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="DomainFamilyType">
		<xs:annotation>
			<xs:documentation>DomainFamilyType specifies domain family types, via a union of the DomainTypeEnum type and the atomic xs:string type. Its base type is the CybOX Core BaseObjectPropertyType, for permitting complex (i.e. regular-expression based) specifications.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="cyboxCommon:BaseObjectPropertyType">
				<xs:simpleType>
					<xs:union memberTypes="NetworkSocketObj:DomainTypeEnum xs:string"/>
				</xs:simpleType>
				<xs:attribute name="datatype" type="cyboxCommon:DatatypeEnum" fixed="string">
					<xs:annotation>
						<xs:documentation>This attribute is optional and specifies the expected type for the value of the specified property.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="SocketType">
		<xs:annotation>
			<xs:documentation>SocketType specifies socket types, via a union of the SocketTypeEnum type and the atomic xs:string type. Its base type is the CybOX Core BaseObjectPropertyType, for permitting complex (i.e. regular-expression based) specifications.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="cyboxCommon:BaseObjectPropertyType">
				<xs:simpleType>
					<xs:union memberTypes="NetworkSocketObj:SocketTypeEnum xs:string"/>
				</xs:simpleType>
				<xs:attribute name="datatype" type="cyboxCommon:DatatypeEnum" fixed="string">
					<xs:annotation>
						<xs:documentation>This attribute is optional and specifies the expected type for the value of the specified property.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="ProtocolType">
		<xs:annotation>
			<xs:documentation>ProtocolType specifies protocol types, via a union of the ProtocolTypeEnum type and the atomic xs:string type. Its base type is the CybOX Core BaseObjectPropertyType, for permitting complex (i.e. regular-expression based) specifications.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:restriction base="cyboxCommon:BaseObjectPropertyType">
				<xs:simpleType>
					<xs:union memberTypes="NetworkSocketObj:ProtocolTypeEnum xs:string"/>
				</xs:simpleType>
				<xs:attribute name="datatype" type="cyboxCommon:DatatypeEnum" fixed="string">
					<xs:annotation>
						<xs:documentation>This attribute is optional and specifies the expected type for the value of the specified property.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="AddressFamilyTypeEnum">
		<xs:annotation>
			<xs:documentation>The AddressFamilyTypeEnum is an enumeration of address family (AF_*) types.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="AF_UNSPEC">
				<xs:annotation>
					<xs:documentation>Specifies an unspecified address family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AF_INET">
				<xs:annotation>
					<xs:documentation>Specifies sockets using for the Internet when using Berkeley sockets.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AF_IPX">
				<xs:annotation>
					<xs:documentation>Specifies the IPX (Novell Internet Protocol) address family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AF_APPLETALK">
				<xs:annotation>
					<xs:documentation>Specifies the APPLETALK DDP address family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AF_NETBIOS">
				<xs:annotation>
					<xs:documentation>Specifies the NETBIOS address family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AF_INET6">
				<xs:annotation>
					<xs:documentation>Specifies the IP version 6 address family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AF_IRDA">
				<xs:annotation>
					<xs:documentation>Specifies IRDA sockets.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AF_BTH">
				<xs:annotation>
					<xs:documentation>Specifies BTH sockets.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DomainTypeEnum">
		<xs:annotation>
			<xs:documentation>The DomainTypeEnum is an enumeration of communication domain (PF_*) types.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="PF_LOCAL">
				<xs:annotation>
					<xs:documentation>Specifies the communication domain from local to host.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_UNIX">
				<xs:annotation>
					<xs:documentation>Specifies the communication domain from UNIX to host.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_FILE">
				<xs:annotation>
					<xs:documentation>Specifies the communication domain from file to host.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_INET">
				<xs:annotation>
					<xs:documentation>Specifies the IP protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_AX25">
				<xs:annotation>
					<xs:documentation>Specifies the Amateur Radio AX.25 family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_IPX">
				<xs:annotation>
					<xs:documentation>Specifies the Novell Internet Protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_INET6">
				<xs:annotation>
					<xs:documentation>Specifies the IP version 6 protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_APPLETALK">
				<xs:annotation>
					<xs:documentation>Specifies the Appletalk DDP protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_NETROM">
				<xs:annotation>
					<xs:documentation>Specifies the Amateur radio NetROM protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_BRIDGE">
				<xs:annotation>
					<xs:documentation>Specifies the Multiprotocol bridge protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_ATMPVC">
				<xs:annotation>
					<xs:documentation>Specifies the ATM PVCs protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_X25">
				<xs:annotation>
					<xs:documentation>Specifies the protocol family reserved for the X.25 project.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_ROSE">
				<xs:annotation>
					<xs:documentation>Specifies the PF_KEY key management API family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_DECnet">
				<xs:annotation>
					<xs:documentation>Specifies the protocol family reserved for the DECnet project.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_NETBEUI">
				<xs:annotation>
					<xs:documentation>Specifies the protocol family reserved for the 802.2LLC project.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_SECURITY">
				<xs:annotation>
					<xs:documentation>Specifies the Security callback pseudo AF protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_KEY">
				<xs:annotation>
					<xs:documentation>Specifies the PF_KEY key management API protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_NETLINK">
				<xs:annotation>
					<xs:documentation>Specifies the netlink routing API family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_ROUTE">
				<xs:annotation>
					<xs:documentation>Specifies the PF_ROUTE routing API family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_PACKET">
				<xs:annotation>
					<xs:documentation>Specifies the packet family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_ASH">
				<xs:annotation>
					<xs:documentation>Specifies the Ash family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_ECONET">
				<xs:annotation>
					<xs:documentation>Specifies the Acorn Econet family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_ATMSVC">
				<xs:annotation>
					<xs:documentation>Specifies the ATM SVCs protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_SNA">
				<xs:annotation>
					<xs:documentation>Specifies the Linux SNA Project protocol family.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_IRDA">
				<xs:annotation>
					<xs:documentation>Specifies IRDA sockets.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_PPPOX">
				<xs:annotation>
					<xs:documentation>Specifies PPPoX sockets.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_WANPIPE">
				<xs:annotation>
					<xs:documentation>Specifies Wanpipe API sockets.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PF_BLUETOOTH">
				<xs:annotation>
					<xs:documentation>Specifies Bluetooth sockets.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SocketTypeEnum">
		<xs:annotation>
			<xs:documentation>The SocketTypeEnum is an enumeration of socket (SOCK_*) types.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="SOCK_STREAM">
				<xs:annotation>
					<xs:documentation>Specifies a pipe-like socket which operates over a connection with a particular remote socket, and transmits data reliably as a stream of bytes.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SOCK_DGRAM">
				<xs:annotation>
					<xs:documentation>Specifies a socket in which individually-addressed packets are sent (datagram).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SOCK_RAW">
				<xs:annotation>
					<xs:documentation>Specifies raw sockets which allow new IP protocls to be implemented in user space. A raw socket receives or sends the raw datagram not including link level headers.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SOCK_RDM">
				<xs:annotation>
					<xs:documentation>Specifies a socket indicating a reliably-delivered message..</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SOCK_SEQPACKET">
				<xs:annotation>
					<xs:documentation>Specifies a datagram congestion control Protocol socket.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ProtocolTypeEnum">
		<xs:annotation>
			<xs:documentation>The ProtocolTypeEnum is an enumeration of protocol types.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="IPPROTO_ICMP">
				<xs:annotation>
					<xs:documentation>Indicates the ICMP protocol.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IPPROTO_IGMP">
				<xs:annotation>
					<xs:documentation>Indicates the IGMP protocol.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BTHPROTO_RFCOMM">
				<xs:annotation>
					<xs:documentation>Indicates the Bluetooth protocol.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IPPROTO_TCP">
				<xs:annotation>
					<xs:documentation>Indicates the TCP protocol.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IPPROTO_UDP">
				<xs:annotation>
					<xs:documentation>Indicates the UDP protocol.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IPPROTO_ICMPV6">
				<xs:annotation>
					<xs:documentation>Indicates the ICMP v6 protocol.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IPPROTO_RM">
				<xs:annotation>
					<xs:documentation>Indicates the Reliable Multicasting protocol.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
